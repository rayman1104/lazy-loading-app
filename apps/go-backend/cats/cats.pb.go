// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cats.proto

package cats

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_38f0b8057a110604, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type CatInput struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int32    `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CatInput) Reset()         { *m = CatInput{} }
func (m *CatInput) String() string { return proto.CompactTextString(m) }
func (*CatInput) ProtoMessage()    {}
func (*CatInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_38f0b8057a110604, []int{1}
}

func (m *CatInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatInput.Unmarshal(m, b)
}
func (m *CatInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatInput.Marshal(b, m, deterministic)
}
func (m *CatInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatInput.Merge(m, src)
}
func (m *CatInput) XXX_Size() int {
	return xxx_messageInfo_CatInput.Size(m)
}
func (m *CatInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CatInput.DiscardUnknown(m)
}

var xxx_messageInfo_CatInput proto.InternalMessageInfo

func (m *CatInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CatInput) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type Cat struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int32    `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cat) Reset()         { *m = Cat{} }
func (m *Cat) String() string { return proto.CompactTextString(m) }
func (*Cat) ProtoMessage()    {}
func (*Cat) Descriptor() ([]byte, []int) {
	return fileDescriptor_38f0b8057a110604, []int{2}
}

func (m *Cat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cat.Unmarshal(m, b)
}
func (m *Cat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cat.Marshal(b, m, deterministic)
}
func (m *Cat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cat.Merge(m, src)
}
func (m *Cat) XXX_Size() int {
	return xxx_messageInfo_Cat.Size(m)
}
func (m *Cat) XXX_DiscardUnknown() {
	xxx_messageInfo_Cat.DiscardUnknown(m)
}

var xxx_messageInfo_Cat proto.InternalMessageInfo

func (m *Cat) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Cat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cat) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type CatList struct {
	Cats                 []*Cat   `protobuf:"bytes,1,rep,name=cats,proto3" json:"cats,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CatList) Reset()         { *m = CatList{} }
func (m *CatList) String() string { return proto.CompactTextString(m) }
func (*CatList) ProtoMessage()    {}
func (*CatList) Descriptor() ([]byte, []int) {
	return fileDescriptor_38f0b8057a110604, []int{3}
}

func (m *CatList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatList.Unmarshal(m, b)
}
func (m *CatList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatList.Marshal(b, m, deterministic)
}
func (m *CatList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatList.Merge(m, src)
}
func (m *CatList) XXX_Size() int {
	return xxx_messageInfo_CatList.Size(m)
}
func (m *CatList) XXX_DiscardUnknown() {
	xxx_messageInfo_CatList.DiscardUnknown(m)
}

var xxx_messageInfo_CatList proto.InternalMessageInfo

func (m *CatList) GetCats() []*Cat {
	if m != nil {
		return m.Cats
	}
	return nil
}

type CatById struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CatById) Reset()         { *m = CatById{} }
func (m *CatById) String() string { return proto.CompactTextString(m) }
func (*CatById) ProtoMessage()    {}
func (*CatById) Descriptor() ([]byte, []int) {
	return fileDescriptor_38f0b8057a110604, []int{4}
}

func (m *CatById) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatById.Unmarshal(m, b)
}
func (m *CatById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatById.Marshal(b, m, deterministic)
}
func (m *CatById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatById.Merge(m, src)
}
func (m *CatById) XXX_Size() int {
	return xxx_messageInfo_CatById.Size(m)
}
func (m *CatById) XXX_DiscardUnknown() {
	xxx_messageInfo_CatById.DiscardUnknown(m)
}

var xxx_messageInfo_CatById proto.InternalMessageInfo

func (m *CatById) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "cats.Empty")
	proto.RegisterType((*CatInput)(nil), "cats.CatInput")
	proto.RegisterType((*Cat)(nil), "cats.Cat")
	proto.RegisterType((*CatList)(nil), "cats.CatList")
	proto.RegisterType((*CatById)(nil), "cats.CatById")
}

func init() { proto.RegisterFile("cats.proto", fileDescriptor_38f0b8057a110604) }

var fileDescriptor_38f0b8057a110604 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xbb, 0xd9, 0x24, 0xb5, 0x53, 0x2c, 0x32, 0xa7, 0x58, 0x10, 0xe2, 0xfa, 0x87, 0x9c,
	0x4a, 0xa9, 0x47, 0x6f, 0xae, 0x22, 0x01, 0x4f, 0xf1, 0xe0, 0x79, 0x4d, 0x06, 0x0d, 0xd8, 0x34,
	0x24, 0xa3, 0xd0, 0x8f, 0xe8, 0xb7, 0x92, 0x4c, 0x21, 0x69, 0xeb, 0xed, 0xc1, 0xbc, 0xf7, 0xe6,
	0x37, 0x0c, 0x40, 0xee, 0xb8, 0x5d, 0xd4, 0xcd, 0x86, 0x37, 0xe8, 0x77, 0xda, 0x8c, 0x21, 0x78,
	0x5a, 0xd7, 0xbc, 0x35, 0x4b, 0x38, 0xb1, 0x8e, 0xd3, 0xaa, 0xfe, 0x66, 0x44, 0xf0, 0x2b, 0xb7,
	0xa6, 0x48, 0xc5, 0x2a, 0x99, 0x64, 0xa2, 0xf1, 0x0c, 0xb4, 0xfb, 0xa0, 0xc8, 0x8b, 0x55, 0x12,
	0x64, 0x9d, 0x34, 0xf7, 0xa0, 0xad, 0x63, 0x9c, 0x81, 0x57, 0x16, 0x62, 0x0d, 0x32, 0xaf, 0x2c,
	0xfa, 0xb0, 0xf7, 0x3f, 0xac, 0x87, 0x70, 0x02, 0x63, 0xeb, 0xf8, 0xa5, 0x6c, 0x19, 0x2f, 0x40,
	0x50, 0x22, 0x15, 0xeb, 0x64, 0xba, 0x9a, 0x2c, 0x84, 0xd1, 0x3a, 0xce, 0x76, 0x84, 0xe7, 0xe2,
	0x7c, 0xd8, 0xa6, 0xc5, 0xf1, 0xaa, 0xd5, 0xaf, 0x02, 0xb0, 0x8e, 0x5f, 0xa9, 0xf9, 0x29, 0x73,
	0xc2, 0x6b, 0xf0, 0xa5, 0x70, 0xba, 0xab, 0x90, 0xbb, 0xe6, 0xa7, 0x7d, 0x5f, 0x37, 0x33, 0x23,
	0xbc, 0x81, 0x30, 0xad, 0x5a, 0x6a, 0x18, 0x67, 0xfd, 0x48, 0xce, 0x9e, 0x0f, 0xab, 0xcd, 0x08,
	0x2f, 0x41, 0x3f, 0x13, 0xe3, 0x10, 0xef, 0x08, 0x0e, 0x2d, 0xb7, 0x10, 0x3e, 0xd2, 0x17, 0x31,
	0x1d, 0xbb, 0xf6, 0x01, 0xcc, 0x08, 0xaf, 0x20, 0x78, 0x73, 0x9c, 0x7f, 0x1e, 0x82, 0xed, 0x57,
	0x2d, 0xd5, 0x7b, 0x28, 0x5f, 0xb9, 0xfb, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x4e, 0x66, 0x2f,
	0xa3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CatServiceClient is the client API for CatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CatServiceClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CatList, error)
	Insert(ctx context.Context, in *CatInput, opts ...grpc.CallOption) (*Cat, error)
	Get(ctx context.Context, in *CatById, opts ...grpc.CallOption) (*Cat, error)
	Delete(ctx context.Context, in *CatById, opts ...grpc.CallOption) (*Empty, error)
	Watch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (CatService_WatchClient, error)
}

type catServiceClient struct {
	cc *grpc.ClientConn
}

func NewCatServiceClient(cc *grpc.ClientConn) CatServiceClient {
	return &catServiceClient{cc}
}

func (c *catServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CatList, error) {
	out := new(CatList)
	err := c.cc.Invoke(ctx, "/cats.CatService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catServiceClient) Insert(ctx context.Context, in *CatInput, opts ...grpc.CallOption) (*Cat, error) {
	out := new(Cat)
	err := c.cc.Invoke(ctx, "/cats.CatService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catServiceClient) Get(ctx context.Context, in *CatById, opts ...grpc.CallOption) (*Cat, error) {
	out := new(Cat)
	err := c.cc.Invoke(ctx, "/cats.CatService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catServiceClient) Delete(ctx context.Context, in *CatById, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cats.CatService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catServiceClient) Watch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (CatService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CatService_serviceDesc.Streams[0], "/cats.CatService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &catServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatService_WatchClient interface {
	Recv() (*Cat, error)
	grpc.ClientStream
}

type catServiceWatchClient struct {
	grpc.ClientStream
}

func (x *catServiceWatchClient) Recv() (*Cat, error) {
	m := new(Cat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CatServiceServer is the server API for CatService service.
type CatServiceServer interface {
	List(context.Context, *Empty) (*CatList, error)
	Insert(context.Context, *CatInput) (*Cat, error)
	Get(context.Context, *CatById) (*Cat, error)
	Delete(context.Context, *CatById) (*Empty, error)
	Watch(*Empty, CatService_WatchServer) error
}

// UnimplementedCatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCatServiceServer struct {
}

func (*UnimplementedCatServiceServer) List(ctx context.Context, req *Empty) (*CatList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCatServiceServer) Insert(ctx context.Context, req *CatInput) (*Cat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedCatServiceServer) Get(ctx context.Context, req *CatById) (*Cat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCatServiceServer) Delete(ctx context.Context, req *CatById) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedCatServiceServer) Watch(req *Empty, srv CatService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterCatServiceServer(s *grpc.Server, srv CatServiceServer) {
	s.RegisterService(&_CatService_serviceDesc, srv)
}

func _CatService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cats.CatService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServiceServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cats.CatService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServiceServer).Insert(ctx, req.(*CatInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cats.CatService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServiceServer).Get(ctx, req.(*CatById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cats.CatService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServiceServer).Delete(ctx, req.(*CatById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatServiceServer).Watch(m, &catServiceWatchServer{stream})
}

type CatService_WatchServer interface {
	Send(*Cat) error
	grpc.ServerStream
}

type catServiceWatchServer struct {
	grpc.ServerStream
}

func (x *catServiceWatchServer) Send(m *Cat) error {
	return x.ServerStream.SendMsg(m)
}

var _CatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cats.CatService",
	HandlerType: (*CatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CatService_List_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _CatService_Insert_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CatService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CatService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _CatService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cats.proto",
}
